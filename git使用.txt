git clone 克隆地址 filename 从其他服务器克隆一个git仓库 filename 参数自定义新的目录名
git init  初始化一个git仓库
git removte 查看分支
git removte -v 查看主分支
git status 查看文件状态
git add 跟踪一个文件

Untracked 未跟踪
Unmodified 未修改
Modified  已修改
Staged 已暂存


Untracked 到 Staged get add 
修改文件则文件属性变成 Modified
一样则是Unmodified
git rm --cached filename git版本库中的内容会被删除但是当前文件夹中的filename还是存在的 此时filename为Untacked状态
git rm filename 此时从Unmodified 变成Untracked

mv filename1 filename2 重命名文件


git log 查看日志 -p 2 查看前两条日志 按q退出

git commit --amend 重新提交

git checkout --filename 撤销之前所做的修改

git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支


git remote show origin 查看远程仓库的更多信息
git remote rename pb paul 来修改一个远程仓库的简写名。 例如，想要将 pb 重命名为 paul，可以用 git remote rename 这样做：

git remote remove paul 移除paul这个远程仓库

1.用git pull来更新代码的时候，遇到了下面的问题：error: Your local changes to the following files would be overwritten by merge: xxx/xxx/xxx.php Please, commit your changes or stash them before you can merge. Aborting
出现这个问题的原因是其他人修改了xxx.php并提交到版本库中去了，而你本地也修改了xxx.php，这时候你进行git pull操作就好出现冲突了，解决方法，在上面的提示中也说的很明确了。
保留本地的方式修改（强烈推荐，还有一种是直接拉取服务器的（不推荐使用就不写了），这样你本地修改的代码的，就会舍弃，相当于你写的代码直接没，你还的重新写）

通过git stash将工作区恢复到上次提交的内容，同时备份本地所做的修改，之后就可以正常git pull了，git pull完成后，执行git stash pop将之前本地做的修改应用到当前工作区。
git stash
git pull
git stash pop

it stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。
git pull:拉取服务器上的代码；
git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。
git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。
git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。

it在执行git add命令时出现以下警告：

warning: LF will be replaced by CRLF in test1.txt. The file will have its original line endings in working directory
因为Git的换行符检查功能。LF是linux下的换行符，而CRLF是enter + 换行。

Git提供了一个换行符检查功能（core.safecrlf），可以在提交时检查文件是否混用了不同风格的换行符。这个功能的选项如下：

false - 不做任何检查
warn - 在提交时检查并警告
true - 在提交时检查，如果发现混用则拒绝提交
建议使用最严格的 true 选项。
假如你正在Windows上写程序，又或者你正在和其他人合作，他们在Windows上编程，而你却在其他系统上，在这些情况下，你可能会遇到行尾结束符问题。这是因为Windows使用回车和换行两个字符来结束一行，而Mac和Linux只使用换行一个字符。虽然这是小问题，但它会极大地扰乱跨平台协作。

Git可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用core.autocrlf来打开此项功能，
如果是在Windows系统上，把它设置成true，这样当签出代码时，LF会被转换成CRLF：

git config --global core.autocrlf true

Linux或Mac系统使用LF作为行结束符，因此你不想 Git 在签出文件时进行自动的转换；当一个以CRLF为行结束符的文件不小心被引入时你肯定想进行修正，把core.autocrlf设置成input来告诉 Git 在提交时把CRLF转换成LF，签出时不转换：
$ git config --global core.autocrlf input

这样会在Windows系统上的签出文件中保留CRLF，会在Mac和Linux系统上，包括仓库中保留LF。

如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中：
$ git config --global core.autocrlf false

Your branch is ahead of 'origin/master' by 1 commit

说明没有文件需要commit，但是本地仓库 有一个commit ahead原来的master，就是本地仓库有一个提交，比远程仓库要先进一个commit。git push origin master，将本地的master分支推送到origin主机的master分支：